////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public ArrayList<Product> prepForTransaction(){
          ArrayList<Product> array = new ArrayList<Product>();
          int basketSize = basket.size();

          for(int i = 0; i < basketSize; i += 1) {
              Product product = basket.remove(0);//the index nums of the elements of the array change each time the loop moves!
              array.add(product);
              }
          return array;
          }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Double getTotalFunds(){
        Double total = 0.0;
        HashMap<PaymentMethod, Double> cards = getCards();
        for( Double funds : cards.values()){ //cards.values() = an "arrayish" Collection of values
            total += funds;
        }
        return total;
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TRANSACTION CLASS
 /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//    HashMap<PaymentMethod, ArrayList<Product>> transaction;
////    HashMap<PaymentMethod, Double> details;
//
//    public Transaction(){
//        transaction = new HashMap<PaymentMethod, ArrayList<Product>>();
////      details = new HashMap<PaymentMethod, Double>();
//    }
//
//    public void fillUp(PaymentMethod card, Basket basket){
//        ArrayList<Product> items = basket.prepForTransaction();
//        transaction.put(card, items);
//    }
//
//    public ArrayList<Product> getBasket() {
//
//        ArrayList<Product> products = transaction.get(0);
//
//        return products;
//
//    }
//
//    public Double getTotal(){
//        ArrayList<Product> allProducts = getBasket();
//        Double total = 0.0;
//        for(Product product : allProducts){
//            total += product.getPrice();
//        }
//        return total;
//    }
//
//    public PaymentMethod getPayMethod() {
//        ArrayList<PaymentMethod> array = new ArrayList<PaymentMethod>();
//        for (PaymentMethod key : transaction.keySet()) {
//            array.add(key);
//        }
//        return array.get(0);
//    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////
//    public Double getPriceByName(int index){
//        return transaction.get();
//    }
//
//    public void defPayType(PaymentMethod card, Basket basket){
//        transaction.put(card, basket.getTotalPrice());
//    }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////